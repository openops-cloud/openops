diff --git a/packages/react-ui/src/app/features/ai/assistant/assistant-ui-chat.tsx b/packages/react-ui/src/app/features/ai/assistant/assistant-ui-chat.tsx
index 4c0595d7..9ee99686 100644
--- a/packages/react-ui/src/app/features/ai/assistant/assistant-ui-chat.tsx
+++ b/packages/react-ui/src/app/features/ai/assistant/assistant-ui-chat.tsx
@@ -2,11 +2,12 @@ import { useTheme } from '@/app/common/providers/theme-provider';
 import { AI_ASSISTANT_SS_KEY } from '@/app/constants/ai';
 import { useAiModelSelector } from '@/app/features/ai/lib/ai-model-selector-hook';
 import { useAssistantChat } from '@/app/features/ai/lib/assistant-ui-chat-hook';
-import { useBuilderStoreOutsideProvider } from '@/app/features/builder/builder-state-provider';
+import { useBuilderStoreOutsideProviderWithSubscription } from '@/app/features/builder/builder-state-provider';
 import { AssistantUiChatContainer } from '@openops/components/ui';
 import { FlowRun, SourceCode } from '@openops/shared';
 import { createFrontendTools } from '@openops/ui-kit';
 import { t } from 'i18next';
+import { omit } from 'lodash-es';
 import { ReactNode, useCallback, useMemo, useState } from 'react';
 import { ChatMode } from '../lib/types';
 
@@ -23,10 +24,18 @@ const AssistantUiChat = ({
   title,
   handleInject,
 }: AssistantUiChatProps) => {
-  const builderStore = useBuilderStoreOutsideProvider((state) => ({
-    setRun: state.setRun,
-    flowVersion: state.flowVersion,
-  }));
+  const builderStore = useBuilderStoreOutsideProviderWithSubscription(
+    (state) => ({
+      flowId: state.flow?.id,
+      flowVersionId: state.flowVersion?.id,
+      runId: state.run?.id,
+      selectedStep: state.selectedStep,
+      showSettingsAIChat: state?.midpanelState?.showAiChat ?? false,
+      setRun: state.setRun,
+      flowVersion: state.flowVersion,
+    }),
+  );
+
   const isInBuilderContext = !!builderStore;
 
   const toolComponents = useMemo(() => {
@@ -62,10 +71,13 @@ const AssistantUiChat = ({
     setChatId(id);
   }, []);
 
+  const context = omit(builderStore, ['setRun', 'flowVersion']);
+
   const { runtime, isLoading, createNewChat } = useAssistantChat({
     chatId,
     onChatIdChange,
     chatMode: ChatMode.Agent,
+    context,
   });
 
   const { theme } = useTheme();
diff --git a/packages/react-ui/src/app/features/ai/lib/assistant-ui-chat-hook.ts b/packages/react-ui/src/app/features/ai/lib/assistant-ui-chat-hook.ts
index 460a2b15..7165dc82 100644
--- a/packages/react-ui/src/app/features/ai/lib/assistant-ui-chat-hook.ts
+++ b/packages/react-ui/src/app/features/ai/lib/assistant-ui-chat-hook.ts
@@ -12,10 +12,7 @@ import { DefaultChatTransport, ToolSet, UIMessage } from 'ai';
 import { t } from 'i18next';
 import { useCallback, useEffect, useMemo, useRef } from 'react';
 import { aiChatApi } from '../../builder/ai-chat/lib/chat-api';
-import {
-  getBuilderStore,
-  useBuilderStoreOutsideProviderWithSubscription,
-} from '../../builder/builder-state-provider';
+import { getBuilderStore } from '../../builder/builder-state-provider';
 import { aiSettingsHooks } from './ai-settings-hooks';
 import { buildQueryKey } from './chat-utils';
 import { createAdditionalContext } from './enrich-context';
@@ -23,16 +20,26 @@ import { ChatMode } from './types';
 
 const PLACEHOLDER_MESSAGE_INTEROP = 'satisfy-schema';
 
+type UseAssistantChatContext = {
+  flowId: string;
+  flowVersionId: string;
+  runId: string | undefined;
+  selectedStep: string | null;
+  showSettingsAIChat: boolean;
+};
+
 interface UseAssistantChatProps {
   chatId: string | null;
   onChatIdChange: (chatId: string | null) => void;
   chatMode: ChatMode;
+  context: UseAssistantChatContext | undefined;
 }
 
 export const useAssistantChat = ({
   chatId,
   onChatIdChange,
   chatMode,
+  context,
 }: UseAssistantChatProps) => {
   const runtimeRef = useRef<AssistantRuntime | null>(null);
   const frontendTools = useMemo(
@@ -41,13 +48,7 @@ export const useAssistantChat = ({
   );
 
   const { flowId, flowVersionId, runId, selectedStep, showSettingsAIChat } =
-    useBuilderStoreOutsideProviderWithSubscription((state) => ({
-      flowId: state.flow?.id,
-      flowVersionId: state.flowVersion?.id,
-      runId: state.run?.id,
-      selectedStep: state.selectedStep,
-      showSettingsAIChat: state?.midpanelState?.showAiChat ?? false,
-    })) ?? {};
+    context ?? {};
 
   const getBuilderState = useCallback(() => {
     const context = getBuilderStore();
diff --git a/packages/react-ui/src/app/features/builder/assistant-ui/hooks/use-step-settings-assistant-chat.ts b/packages/react-ui/src/app/features/builder/assistant-ui/hooks/use-step-settings-assistant-chat.ts
index 7275c4f3..990ed2a0 100644
--- a/packages/react-ui/src/app/features/builder/assistant-ui/hooks/use-step-settings-assistant-chat.ts
+++ b/packages/react-ui/src/app/features/builder/assistant-ui/hooks/use-step-settings-assistant-chat.ts
@@ -9,7 +9,16 @@ export const useStepSettingsAssistantChat = (
   flowVersion: FlowVersion,
   selectedStep: string,
 ) => {
-  const dispatch = useBuilderStateContext((state) => state.applyMidpanelAction);
+  const { dispatch, builderState } = useBuilderStateContext((state) => ({
+    dispatch: state.applyMidpanelAction,
+    builderState: {
+      flowId: state.flow?.id,
+      flowVersionId: state.flowVersion?.id,
+      runId: state.run?.id,
+      selectedStep: state.selectedStep,
+      showSettingsAIChat: state.midpanelState.showAiChat,
+    },
+  }));
   const [chatSessionKey, setChatSessionKey] = useState<string>(nanoid());
 
   const onChatIdChange = useCallback((id: string | null) => {
@@ -31,6 +40,7 @@ export const useStepSettingsAssistantChat = (
     chatId: chatSessionKey,
     onChatIdChange,
     chatMode: ChatMode.StepSettings,
+    context: builderState,
   });
 
   return {
