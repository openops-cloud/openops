apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.postgres.name }}
  labels:
    app: {{ .Values.postgres.name }}
spec:
  replicas: {{ .Values.postgres.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.postgres.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.postgres.name }}
    spec:
      containers:
      - name: {{ .Values.postgres.name }}
        image: {{ .Values.postgres.image }}:{{ .Values.postgres.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        args:
        - postgres
        - -c
        - max_connections={{ .Values.postgres.env.maxConnections }}
        env:
          {{- range $k, $v := .Values.postgres.env }}
          - name: {{ $k }}
            value: {{ tpl $v $ | quote }}
          {{- end }}
          - name: PGDATA
            value: "/var/lib/postgresql/data/pgdata"
        ports:
        - containerPort: 5432
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: init-script
          mountPath: /docker-entrypoint-initdb.d/init-db.sh
          subPath: init-db.sh
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 5
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 5
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-data-pvc
      - name: init-script
        configMap:
          name: postgres-init-script
          defaultMode: 0755
