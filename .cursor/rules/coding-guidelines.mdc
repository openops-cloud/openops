---
description: Coding guidelines
globs: 
alwaysApply: true
---
---
## General Principles
- **Follow existing code style and patterns in the repository.**
- **Write clear, self-documenting code** with descriptive variable and function names.
- **Include comments** for complex logic or non-obvious behavior.
- **Write tests** for new functionality and any changes.
- **Update documentation** for user-facing changes.
---

## Formatting & Linting
- **Indentation:** 2 spaces (TypeScript/JavaScript).
- **Line length:** 100â€“120 characters preferred.
- **Braces:** Required for all control blocks, even single-line.
- **Spacing:**
  - One space between keywords and parentheses: `if (condition) {`
  - No trailing whitespace.
  - Newline at end of file.
- **Linting:** Use ESLint as configured in each package.
  - Example:
    ```
    nx lint <package-name>
    ```
- **Formatting:** Follow Prettier rules if configured.
---
## Naming Conventions
- **Variables/Functions:** `camelCase`
- **Classes/Types:** `PascalCase`
- **Constants:** `UPPER_SNAKE_CASE`
- **Files:** Use lowercase with hyphens (e.g., `user-profile.ts`)
---
## Language-Specific Notes
- **TypeScript/JavaScript (Nx Monorepo):**
  - Use types and interfaces where appropriate.
  - Prefer `const` over `let` or `var`.
  - Prefer arrow functions for callbacks and functional components.
  - Use explicit return types for exported functions.
- **Tests:**
  - Place unit tests alongside the code in a `tests` folder
  - Use Jest for testing
- **Shell scripts:** Use `#!/usr/bin/env bash` and indent with 2 spaces.
---
## Comments
- Explain _why_ something is done, not _what_ (the code should be self-explanatory).
- Use `TODO:` for actionable technical debt.
- Document public functions, classes, and modules.
---
## Dependencies
- Do not introduce new dependencies without discussion.
- Keep dependency lists minimal and up-to-date.
---
## Tooling
- Respect `.editorconfig`, `.eslintrc`, `.prettierrc`, and other config files in the repository.

### Testing & Linting
Use nx at the root of the project to run unit tests, for example:
nx test react-ui
nx lint react-ui
nx test ui-components
nx test-unit server-api
nx test engine

---
## Example (TypeScript)
```typescript
// Good Example
export function getUserProfile(userId: string): UserProfile {
  if (!userId) {
    throw new Error('User ID required');
  }
  // TODO: Replace with real data source
  return { id: userId, name: 'Sample User' };
}
```

## Frontend Guidelines
- Use the `react-ui` package for main application logic.
- Place pure, reusable components in the `ui-components` package, documented in Storybook.
- **Tech stack must strictly use:**
  - React 18
  - Zustand
  - react-query v5
  - shadcn
  - Axios (we already have a wrapper in api.ts), use `qs` package for query strings
- Place and write tests in a separate `tests` folder.
- Ensure compliance with strict linter setups (including Sonar).
- Follow best practices for React hooks.
- Prefer small, composable components. Extract helper functions where possible.
- Use `cn` utility to group tailwind classnames, for example:
```
    <div
      className={cn(
        'absolute bottom-[-20px] left-1/2 -translate-x-1/2',
        'w-[118px] h-[24px] flex items-center justify-center',
        'font-satoshi font-medium text-xs text-blueAccent-500',
        'border border-solid border-blueAccent-500 rounded-[4px]',
        'bg-background-800',
        {
            pt-2: !someVar
        }
      )}
    >
      {t('Sample output data')}
    </div>
```

