name: Create a release
run-name: Create a release for ${{ inputs.version || 'auto-incremented version' }}

on:
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: Override the version, for example if you want to increment minor or major version
      latest:
        type: boolean
        description: Create latest tag
        default: true
      deploy_to_test:
        type: boolean
        description: Deploy the release to the test environment
        default: true

jobs:
  get-version:
    name: Get release version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ inputs.version || steps.semver.outputs.nextVersion }}
    steps:
    - name: Get next version
      if: inputs.version == ''
      id: semver
      uses: flatherskevin/semver-action@fc3c4e67353e3c45b8164521ddd17c9e38d6d4d8
      with:
        incrementLevel: patch
        source: tags
  tag-images-for-release:
    needs: get-version
    strategy:
      matrix:
        target:
          - name: App
            repository: openops-app
          - name: Engine
            repository: openops-engine
    name: Tag ${{ matrix.target.name }} for release ${{ needs.get-version.outputs.version }}
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.get-version.outputs.version }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.2.1
        with:
          aws-access-key-id: ${{ secrets.ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.ECR_REGION }}
      - name: Login to private ECR
        id: login-private-ecr
        uses: aws-actions/amazon-ecr-login@v2.0.1
      - name: Login to public ECR
        uses: aws-actions/amazon-ecr-login@v2.0.1
        env:
          AWS_REGION: ${{ vars.ECR_PUBLIC_REGION }}
        with:
          registry-type: public
      - name: Pull image and tag it
        env:
          SHA: ${{ github.sha }}
        run: |
          SOURCE_IMAGE=${{ steps.login-private-ecr.outputs.registry }}/openops/${{ matrix.target.repository }}:${SHA::8}
          echo "- ðŸš€ Source image: \`$SOURCE_IMAGE\`" >> $GITHUB_STEP_SUMMARY
          PUBLIC_REPOSITORY=public.ecr.aws/openops/${{ matrix.target.repository }}
          docker buildx imagetools create $SOURCE_IMAGE --tag $PUBLIC_REPOSITORY:$VERSION
          echo "- âœ… Successfully tagged as \`$PUBLIC_REPOSITORY:$VERSION\`" >> $GITHUB_STEP_SUMMARY
          if ${{ inputs.latest }}; then
            docker buildx imagetools create $SOURCE_IMAGE --tag $PUBLIC_REPOSITORY:latest
            echo "- âœ… Successfully tagged as \`$PUBLIC_REPOSITORY:latest\`" >> $GITHUB_STEP_SUMMARY
          fi
  create-github-release:
    name: Create GitHub release
    needs: [tag-images-for-release, get-version]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      VERSION: ${{ needs.get-version.outputs.version }}
      RELEASE_DC_FILENAME: openops-dc-${{ needs.get-version.outputs.version }}.zip
    outputs:
      download_url: ${{ steps.upload-release.outputs.download_url }}
    steps:
      - uses: actions/checkout@v4.2.2
      - name: Update version in docker-compose
        run: |
          cp THIRD_PARTY_LICENSES.txt LICENSE NOTICE deploy/docker-compose
          cd deploy/docker-compose
          sed -i "s/\${OPS_VERSION:-latest}/$VERSION/" docker-compose.yml
          zip -r $RELEASE_DC_FILENAME .
      - name: Create a release
        id: create-release
        uses: softprops/action-gh-release@v2.3.2
        with:
          target_commitish: ${{ github.sha }}
          tag_name: ${{ env.VERSION }}
          generate_release_notes: true
          draft: true
          files: deploy/docker-compose/${{ env.RELEASE_DC_FILENAME }}
      - name: Write summary
        run: |
          RELEASE_URL="${{ steps.create-release.outputs.url }}"
          echo "### Release $VERSION was created! ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
          echo "The release was created as a draft." >> $GITHUB_STEP_SUMMARY
          echo "Please [review and publish it](${RELEASE_URL/\/tags\//\/edit\/})." >> $GITHUB_STEP_SUMMARY
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.2.1
        with:
          aws-access-key-id: ${{ secrets.RELEASE_S3_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.RELEASE_S3_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: Upload release to S3
        id: upload-release
        env:
          DOWNLOAD_URL: https://files.openops.com/releases/${{ env.VERSION }}/${{ env.RELEASE_DC_FILENAME}}
        run: |
          aws s3 cp deploy/docker-compose/$RELEASE_DC_FILENAME s3://openops/releases/$VERSION/$RELEASE_DC_FILENAME
          cat <<EOF >> $GITHUB_STEP_SUMMARY
          Also available at $DOWNLOAD_URL .

          Can be installed using:
          \`\`\`
          curl -fsS https://openops.sh/install | OPENOPS_URL=$DOWNLOAD_URL OPENOPS_VERSION=$VERSION sh
          \`\`\`
          EOF
          echo "download_url=$DOWNLOAD_URL" >> $GITHUB_OUTPUT
  trigger-deployment:
    name: Trigger a deployment
    needs: [get-version, create-github-release]
    runs-on: ubuntu-latest
    if: github.repository == 'openops-cloud/openops' && inputs.deploy_to_test
    steps:
      - name: Get token from Github App
        id: app_token
        uses: actions/create-github-app-token@v2.0.6
        with:
          app-id: ${{ vars.DEVOPS_GITHUB_APP_ID }}
          private-key: ${{ secrets.DEVOPS_GITHUB_APP_PEM }}
          owner: ${{ github.repository_owner }}
      - name: Trigger deployment
        env:
          GITHUB_TOKEN: ${{ steps.app_token.outputs.token }}
          VERSION: ${{ needs.get-version.outputs.version }}
          RELEASE_URL: ${{ needs.create-github-release.outputs.download_url }}
        run: |
          gh workflow run "Deploy Docker Compose Release" -R openops-cloud/devops -f release_version=${VERSION} -f release_url=${RELEASE_URL} -r main

